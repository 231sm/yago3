YAGO Policy: Architecture
Author: Fabian M. Suchanek

-------------- Architecture --------------------

The overall goal of the YAGO architecture is to enable
cooperation of several contributors, facilitate debugging 
and maintenance, and allow users to download only
particular pieces of YAGO ("YAGO a la carte").
In short: YAGO is modular, both in code and in data.

The current architecture pursues the goal of modularity
at the expense of longer running times and inefficiency.
The rationale is that we do not care if the extraction runs 
a few hours longer, if we can save a few hours of human
work in return.

-------------- Themes --------------------

The YAGO data is split into "themes". Themes can overlap,
but should not. The union of all themes constitutes "YAGO full".

The class basics.Theme implements a theme.

-------------- Extractors --------------------

An extractor is a unit of code that
* takes as input
- one or more themes
- a raw data file
* produces as output one or more themes

Every extraction module shall follow this scheme,
i.e., implement extractors.Extractor. This defines a
dependency graph of extractors.

Extractors are scheduled in the right order and 
called by main.Caller

-------------- Final Themes --------------------

Themes that are free of duplicates and ready for
export are called "final themes". These live in the
same folder as the other themes, but start with "yago...".
Final themes are constructed by finalExtractors.

-------------- Techniques --------------------

Facts can have a meta-fact <extractionSource>. This 
meta-fact can have a meta-fact <extractionTechnique>.
There should be a finite set of techniques that does
not grow with the data.

Facts that do not have such an annotation are assumed
to be trivially clean.